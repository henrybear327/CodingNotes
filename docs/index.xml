<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Blog on Docdock</title>
    <link>https://henrybear327.github.io/CodingNotes/</link>
    <description>Recent content in Coding Blog on Docdock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Oct 2017 20:27:23 +0800</lastBuildDate>
    
	<atom:link href="https://henrybear327.github.io/CodingNotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>October 11, 2017</title>
      <link>https://henrybear327.github.io/CodingNotes/contest/itsa_ptc/oct2017/</link>
      <pubDate>Wed, 11 Oct 2017 20:42:17 +0800</pubDate>
      
      <guid>https://henrybear327.github.io/CodingNotes/contest/itsa_ptc/oct2017/</guid>
      <description>ITSA A 1#include&amp;lt;bits/stdc++.h&amp;gt;23usingnamespacestd;45typedeflonglongll;67voidsolve()8{9intn;10scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);1112llans=0;13for(inti=1;i&amp;lt;=n;i++)14if(i%3==0)15ans+=i;16printf(&amp;#34;%lld\n&amp;#34;,ans);17}1819intmain()20{21intncase;22scanf(&amp;#34;%d&amp;#34;,&amp;amp;ncase);23while(ncase--)24solve();2526return0;27}  B 1m=int(input())2for_inrange(m):3data=[0for_inrange(10001)]4n=int(input())5for_inrange(n):6a,b=map(int,input().split())7foriinrange(a,b):8data[i]=19print(sum(data)) 
C 1#include&amp;lt;bits/stdc++.h&amp;gt;23usingnamespacestd;45typedeflonglongll;67#define lc(i) (i*2) 8#define rc(i) (i*2+1) 910voidsolve()11{12intC;13scanf(&amp;#34;%d&amp;#34;,&amp;amp;C);1415charinp[111];16scanf(&amp;#34;%s&amp;#34;,inp);1718intlen=strlen(inp);19// printf(&amp;#34;%s\n&amp;#34;, inp); 2021inttree[111],idx=1;22for(inti=0;i&amp;lt;len;i++){23if(inp[i]==&amp;#39;(&amp;#39;){24intnum;25sscanf(inp+i+3,&amp;#34;%d&amp;#34;,&amp;amp;num);26// printf(&amp;#34;%s\n&amp;#34;, inp + i); 2728tree[idx]=num;29idx++;30}31}3233/* 34for(int i = 1; i &amp;lt; idx; i++) 35printf(&amp;#34;%d %d\n&amp;#34;, i, tree[i]); 36*/3738vector&amp;lt;string&amp;gt;ans;39for(inti=1;i&amp;lt;idx;i++){40if(lc(i)&amp;lt;idx&amp;amp;&amp;amp;abs(tree[i]-tree[lc(i)])&amp;lt;=C){41stringtmp=&amp;#34;&amp;#34;;42tmp+=&amp;#39;A&amp;#39;+(i-1);43tmp+=&amp;#39;A&amp;#39;+(lc(i)-1);4445ans.push_back(tmp);46}4748if(rc(i)&amp;lt;idx&amp;amp;&amp;amp;abs(tree[i]-tree[rc(i)])&amp;lt;=C){49stringtmp=&amp;#34;&amp;#34;;50tmp+=&amp;#39;A&amp;#39;+(i-1);51tmp+=&amp;#39;A&amp;#39;+(rc(i)-1);5253ans.push_back(tmp);54}5556}5758sort(ans.begin(),ans.end());59for(inti=0;i&amp;lt;(int)ans.size();i++){60printf(&amp;#34;%s%c&amp;#34;,ans[i].c_str(),i==(int)ans.size()-1?&amp;#39;\n&amp;#39;:&amp;#39; &amp;#39;);61}62}6364intmain()65{66intncase;67scanf(&amp;#34;%d&amp;#34;,&amp;amp;ncase);68while(ncase--)69solve();7071return0;72} 
D 1#include&amp;lt;bits/stdc++.h&amp;gt;2usingnamespacestd;34#define st first 5#define nd second 67typedefpair&amp;lt;int,int&amp;gt;pii;// &amp;lt;d, v&amp;gt; 8structEdge{9intto,w;10};1112constintMAX_V=1000;13constintINF=0x3f3f3f3f;1415intV;// V, Source 16vector&amp;lt;Edge&amp;gt;g[MAX_V];17intd[MAX_V][MAX_V];1819voiddijkstra(intS){20fill(d[S],d[S]+V,INF);21priority_queue&amp;lt;pii,vector&amp;lt;pii&amp;gt;,greater&amp;lt;pii&amp;gt;&amp;gt;pq;2223d[S][S]=0;24pq.push(pii(0,S));2526while(!pq.empty()){27piitop=pq.top();pq.pop();28intu=top.nd;2930if(d[S][u]&amp;lt;top.st)continue;3132// for (const Edge&amp;amp; e : g[u]) { 33for(size_ti=0;i&amp;lt;g[u].size();i++){34constEdge&amp;amp;e=g[u][i];35if(d[S][e.to]&amp;gt;d[S][u]+e.w){36d[S][e.to]=d[S][u]+e.w;37pq.push(pii(d[S][e.to],e.to));38}39}40}41}4243intmain(){44intN,M;45scanf(&amp;#34;%d&amp;#34;,&amp;amp;N);46scanf(&amp;#34;%d&amp;#34;,&amp;amp;M);47for(intu=0;u&amp;lt;M;u++){48for(intv=0;v&amp;lt;M;v++){49intw;scanf(&amp;#34;%d&amp;#34;,&amp;amp;w);50g[u].push_back(Edge{v,w});51}52}53V=M;54for(inti=0;i&amp;lt;N;i++){55intp,q;scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;p,&amp;amp;q);56dijkstra(p);57printf(&amp;#34;%d\n&amp;#34;,d[p][q]);58}59return0;60} 
E 1#include&amp;lt;bits/stdc++.h&amp;gt;2usingnamespacestd;34typedeflonglongll;56lldp[16][16];7llC(lla,llb){8if(dp[a][b]!=-1)9returndp[a][b];10llans=1;11for(inti=1;i&amp;lt;=b;i++){12ans=ans*(a-i+1);13ans=ans/i;14}15returndp[a][b]=ans;16}1718llans=0;1920llfactorial[16];2122intsz[16];2324inttotal=0;25voiddfs(intpartition,intdepth,intrem)26{27if(rem&amp;lt;=0)28return;2930if(depth==partition-1){31// get last partition 32if(depth!=0&amp;amp;&amp;amp;rem&amp;lt;sz[depth-1])33return;3435sz[depth]=rem;3637// for(int i = 0; i &amp;lt; partition; i++) 38// printf(&amp;#34;%d%c&amp;#34;, sz[i], i == partition - 1 ?</description>
    </item>
    
    <item>
      <title>Hugo Setup</title>
      <link>https://henrybear327.github.io/CodingNotes/tools/hugo/hugo-setup/</link>
      <pubDate>Mon, 09 Oct 2017 23:30:04 +0800</pubDate>
      
      <guid>https://henrybear327.github.io/CodingNotes/tools/hugo/hugo-setup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; is a very well-designed static site generator. The user experience is way better than what I have tried so far. One of the good things about Hugo is that the config file is very clean! Also, the installation is easy, version controlling it is quite simple, and it&amp;rsquo;s easy to share the source code and let people create post PR!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo Usage</title>
      <link>https://henrybear327.github.io/CodingNotes/tools/hugo/hugo-usage/</link>
      <pubDate>Tue, 10 Oct 2017 19:23:58 +0800</pubDate>
      
      <guid>https://henrybear327.github.io/CodingNotes/tools/hugo/hugo-usage/</guid>
      <description>Useful Commands  hugo help: get Hugo documentation! hugo: generates the site to the destination folder hugo --cleanDestinationDir: remove files from destination not found in static directories  Creating a New Chapter  hugo new --kind chapter [path to file]/_index.md  Creating a New Article  Creater your own archetypes first! hugo new [path to post]/[post name].md: create a new post The one with the lower weight shows up first  Content Organization  All posts are contained in the content folder The folder hierarchy is the shape of the website</description>
    </item>
    
    <item>
      <title></title>
      <link>https://henrybear327.github.io/CodingNotes/_header/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://henrybear327.github.io/CodingNotes/_header/</guid>
      <description>Coding Notes</description>
    </item>
    
  </channel>
</rss>